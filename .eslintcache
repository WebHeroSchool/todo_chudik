[{"D:\\Обучение\\WHS\\React\\React_Chudik\\todo\\src\\index.js":"1","D:\\Обучение\\WHS\\React\\React_Chudik\\todo\\src\\App.js":"2","D:\\Обучение\\WHS\\React\\React_Chudik\\todo\\src\\reportWebVitals.js":"3","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\index.js":"4","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\App\\App.js":"5","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\ItemList\\ItemList.js":"6","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\InputItem\\InputItem.js":"7","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Item\\Item.js":"8","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Todo\\Todo.js":"9","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\About\\About.js":"10","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Repositories\\Repositories.js":"11","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Sort\\Sort.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":577,"mtime":1611912331758,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":163,"mtime":1611933106437,"results":"17","hashOfConfig":"18"},{"size":1151,"mtime":1618576292245,"results":"19","hashOfConfig":"18"},{"size":1483,"mtime":1618932820705,"results":"20","hashOfConfig":"18"},{"size":1548,"mtime":1618934510490,"results":"21","hashOfConfig":"18"},{"size":1002,"mtime":1618933684069,"results":"22","hashOfConfig":"18"},{"size":2683,"mtime":1618988632890,"results":"23","hashOfConfig":"18"},{"size":3682,"mtime":1618575382841,"results":"24","hashOfConfig":"18"},{"size":6312,"mtime":1618566146672,"results":"25","hashOfConfig":"18"},{"size":1191,"mtime":1618930382051,"results":"26","hashOfConfig":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"oaug9l",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1npw8jm",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"D:\\Обучение\\WHS\\React\\React_Chudik\\todo\\src\\index.js",[],["55","56"],"D:\\Обучение\\WHS\\React\\React_Chudik\\todo\\src\\App.js",[],"D:\\Обучение\\WHS\\React\\React_Chudik\\todo\\src\\reportWebVitals.js",[],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\index.js",[],["57","58"],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\App\\App.js",[],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\ItemList\\ItemList.js",[],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\InputItem\\InputItem.js",["59","60"],"import React from 'react';\r\nimport classnames from 'classnames';\r\nimport styles from './InputItem.module.css';\r\nimport buttonImg from './img/add.svg';\r\n\r\nclass InputItem extends React.Component {\r\n  state = {\r\n    inputValue: '',\r\n    error: false,\r\n    repeat: false\r\n  };\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.inputValue === '') {\r\n      this.setState({\r\n          error: true,\r\n          repeat: false\r\n      })\r\n    } else if (this.props.items.find(item => item.value === this.state.inputValue)) {\r\n      this.setState({\r\n          repeat: true\r\n      })\r\n    } else {\r\n      this.setState({\r\n          inputValue: '',\r\n          error: false,\r\n          repeat: false\r\n      })\r\n      this.props.onClickAdd(this.state.inputValue);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onClickAdd, items } = this.props;\r\n\r\n    return (\r\n      <form\r\n        onSubmit={this.onSubmit}\r\n        className={classnames({\r\n          [styles.form]: true,\r\n          [styles.error]: this.state.error,\r\n          [styles.repeat]: this.state.repeat\r\n        })}>\r\n        <input \r\n          type='text'\r\n          placeholder={'Просто введите сюда название дела...'}\r\n          value={this.state.inputValue}\r\n          onChange={event => this.setState({inputValue: event.target.value})}\r\n          className={styles.input}\r\n        />\r\n        <button className={styles.btn}>\r\n          <img src={buttonImg} alt='Button'/>\r\n        </button>\r\n      </form>);\r\n  }\r\n};\r\n\r\nexport default InputItem;","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Item\\Item.js",[],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Todo\\Todo.js",[],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\About\\About.js",[],"D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Repositories\\Repositories.js",["61"],"import React from 'react';\r\nimport classnames from 'classnames';\r\nimport { Octokit } from '@octokit/rest';\r\nimport Card from '@material-ui/core/Card';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport styles from './Repositories.module.css';\r\nimport starImg from './img/Star.svg';\r\nimport strokeImg from './img/Stroke.svg';\r\nimport errorImg from './img/Error.svg';\r\n\r\nconst octokit = new Octokit();\r\n\r\nclass Repositories extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    isError: false,\r\n    repoList: [],\r\n    firstRepo: 0,\r\n    lastRepo: 5\r\n  }\r\n\r\n  onClickBack = () => {\r\n    this.setState({\r\n      firstRepo: this.state.firstRepo - 5,\r\n      lastRepo: this.state.lastRepo - 5,\r\n    });\r\n  };\r\n\r\n  onClickNext = () => {\r\n    this.setState({\r\n      firstRepo: this.state.firstRepo + 5,\r\n      lastRepo: this.state.lastRepo + 5,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    octokit.repos.listForUser({\r\n      username: 'IvanBurovkin'\r\n      }).then(({ data }) => {\r\n        this.setState({\r\n          repoList: data,\r\n          isLoading: false\r\n        });\r\n      }).catch(() => {\r\n        this.setState({\r\n          isLoading: false,\r\n          isError: true,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, isError, repoList, firstRepo, lastRepo } = this.state;\r\n    \r\n    return (\r\n      <Card>\r\n        <div className={styles.wrap}>\r\n          <h1 className={styles.title}>Репозитории на github.com</h1>\r\n          { isLoading ? <CircularProgress className={styles.preloader}/> :\r\n            <div className={styles.inner}>\r\n                { isError ? \r\n                  <div className={styles.error_container}>\r\n                    <img src={ errorImg } alt='Error' className={styles.error_img} />\r\n                    <h2 className={styles.error_subtitle}>Что-то пошло не так...</h2>\r\n                    <p className={styles.error_text}>Попробуйте \r\n                      <a href='' onClick={() => window.location.reload()} className={styles.error_link}> загрузить </a> \r\n                    еще раз</p>\r\n                  </div> :\r\n                    <div>\r\n                      { repoList.length === 0 ? \r\n                        <div className={styles.error_container}>\r\n                          <img src={ errorImg } alt='Error' className={styles.error_img} />\r\n                          <h2 className={styles.error_subtitle}>Репозитории отсутствуют</h2>\r\n                          <p className={styles.error_text}>Добавьте как минимум один репозиторий на&ensp;\r\n                            <a href='https://github.com' target='_blank' rel='noopener noreferrer' className={styles.error_link}>github.com</a>\r\n                          </p>\r\n                        </div> :\r\n                          <div>\r\n                            {!isLoading && <ol className={styles.list}>\r\n                              {repoList.slice(firstRepo, lastRepo).map(repo => (\r\n                                <li key={repo.id} className={styles.list__item}>\r\n                                  <a href={repo.html_url} target='_blank' rel='noopener noreferrer' className={styles.name}>{repo.name}</a>\r\n                                  <div className={styles.info}>\r\n                                    <div className={\r\n                                      classnames({\r\n                                        [styles.circle]: true,\r\n                                        [styles.html]: repo.language === 'HTML',\r\n                                        [styles.css]: repo.language === 'CSS',\r\n                                        [styles.js]: repo.language === 'JavaScript'\r\n                                      })}\r\n                                    >\r\n                                    </div>\r\n                                    <p className={styles.language}>{repo.language}</p>\r\n                                    <div className={styles.star}>\r\n                                      <img src={ starImg } alt='Star' />\r\n                                      <p>{repo.stargazers_count}</p>\r\n                                    </div>\r\n                                    <div className={styles.forks}>\r\n                                      <img src={ strokeImg } alt='Stroke' />\r\n                                      <p>{repo.forks}</p>\r\n                                    </div>\r\n                                      <p className={styles.update}>Updated on {new Date(repo.updated_at).toLocaleString('en-GB', {\r\n                                        day: 'numeric',\r\n                                        month: 'short',\r\n                                        year: 'numeric'\r\n                                      })}</p>\r\n                                  </div>\r\n                                </li>))}\r\n                            </ol>}\r\n                            <div className={styles.pagination}>\r\n                              <button \r\n                                className={classnames({\r\n                                  [styles.button]: true,\r\n                                  [styles.disabled]: firstRepo === 0\r\n                                })} \r\n                                onClick={() => this.onClickBack()}\r\n                                disabled={firstRepo === 0}\r\n                              >\r\n                                Назад\r\n                              </button>\r\n                              <button \r\n                                className={classnames({\r\n                                    [styles.button]: true,\r\n                                    [styles.disabled]: repoList.length <= lastRepo\r\n                                })} \r\n                                onClick={() => this.onClickNext()}\r\n                                disabled={repoList.length <= lastRepo}\r\n                              >\r\n                                Далее\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                      }\r\n                    </div>\r\n                }\r\n            </div>\r\n          }\r\n        </div>\r\n      </Card>\r\n    );\r\n  } \r\n}\r\n\r\nexport default Repositories;","D:\\Обучение\\WHS\\React\\todo_chudik\\src\\components\\Sort\\Sort.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":36,"column":13,"nodeType":"70","messageId":"71","endLine":36,"endColumn":23},{"ruleId":"68","severity":1,"message":"72","line":36,"column":25,"nodeType":"70","messageId":"71","endLine":36,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":66,"column":23,"nodeType":"75","endLine":66,"endColumn":105},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],"no-unused-vars","'onClickAdd' is assigned a value but never used.","Identifier","unusedVar","'items' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]